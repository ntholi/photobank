// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  user
  contributor
  moderator
  admin
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String                  @unique
  emailVerified          DateTime?               @map("email_verified")
  image                  String?
  role                   Role                    @default(user)
  blocked                Boolean                 @default(false)
  website                String?
  bio                    String?
  contributorApplication ContributorApplication?
  photos                 Photo[]
  purchasedPhotos        PurchasedPhotos[]
  savedPhotos            SavedPhotos[]
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  account                Account[]
  session                Session[]
  AuditLog               AuditLog[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum ApplicationStatus {
  pending
  approved
  rejected
}

model ContributorApplication {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @unique @map("user_id")
  status    ApplicationStatus @default(pending)
  message   String?
  createdAt DateTime          @default(now()) @map("created_at")

  @@map("contributor_applications")
}

enum PhotoStatus {
  draft
  published
  pending
  rejected
}

model Photo {
  id               String            @id @default(cuid())
  fileName         String
  status           PhotoStatus       @default(draft)
  caption          String?
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @map("user_id")
  location         Location?         @relation(fields: [locationId], references: [id])
  locationId       String?
  locationCoverFor LocationDetails?  @relation("LocationCoverPhoto")
  purchasedPhotos  PurchasedPhotos[]
  savedPhotos      SavedPhotos[]
  labels           PhotoLabel[]
  homePhoto        HomePhoto[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@map("photos")
}

model PhotoLabel {
  id         Int      @id @default(autoincrement())
  photo      Photo    @relation(fields: [photoId], references: [id])
  photoId    String   @map("photo_id")
  confidence Float
  label      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("photo_labels")
}

model HomePhoto {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @unique @map("photo_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("home_photos")
}

model Tag {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  labels String[]

  @@map("tags")
}

model Location {
  id              String           @id
  name            String
  latitude        Float
  longitude       Float
  photos          Photo[]
  locationDetails LocationDetails?

  @@map("locations")
}

model LocationDetails {
  id           String   @id @default(cuid())
  location     Location @relation(fields: [locationId], references: [id])
  locationId   String   @unique @map("location_id")
  coverPhoto   Photo?   @relation("LocationCoverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId String?  @unique @map("cover_photo_id")
  about        String?
  tourUrl      String?  @map("tour_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("location_details")
}

model PurchasedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("purchased_photos")
}

model SavedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @unique @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("saved_photos")
}

model Update {
  id        Int      @id @default(autoincrement())
  name      String
  features  String[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("updates")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  model     String
  value     Json?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")

  @@map("audit_logs")
}
