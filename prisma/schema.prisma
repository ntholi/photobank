// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

enum Role {
  user
  moderator
  admin
}

model User {
  id String @id

  photos          Photo[]
  purchasedPhotos PurchasedPhotos[]
  savedPhotos     SavedPhotos[]

  @@map("users")
}

enum PhotoStatus {
  pending
  approved
  rejected
}

model Photo {
  id              Int               @id @default(autoincrement())
  name            String
  status          PhotoStatus       @default(pending)
  description     String?
  url             String
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @map("user_id")
  location        Location?         @relation(fields: [locationId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  purchasedPhotos PurchasedPhotos[]
  savedPhotos     SavedPhotos[]
  locationId      Int?

  @@map("photos")
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  lat    Float
  lng    Float
  photos Photo[]

  @@map("locations")
}

model PurchasedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   Int      @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("purchased_photos")
}

model SavedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   Int      @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("saved_photos")
}
