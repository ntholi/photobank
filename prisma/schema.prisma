// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

enum Role {
  user
  moderator
  admin
}

model User {
  id              String            @id
  username        String            @unique
  firstName       String?           @map("first_name")
  lastName        String?           @map("last_name")
  email           String?
  image           String?
  role            Role              @default(user)
  photos          Photo[]
  purchasedPhotos PurchasedPhotos[]
  savedPhotos     SavedPhotos[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@map("users")
}

enum PhotoStatus {
  draft
  published
  pending
  rejected
}

model Photo {
  id              String            @id @default(cuid())
  fileName        String
  status          PhotoStatus       @default(draft)
  caption         String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @map("user_id")
  location        Location?         @relation(fields: [locationId], references: [id])
  locationId      Int?
  purchasedPhotos PurchasedPhotos[]
  savedPhotos     SavedPhotos[]
  labels          PhotoLabel[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@map("photos")
}

model PhotoLabel {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @map("photo_id")
  score     Float
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   Int      @map("label_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("photo_labels")
}

model Label {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  tags        Tag[]
  photoLabels PhotoLabel[]

  @@map("labels")
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  labels Label[]

  @@map("tags")
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  lat    Float
  lng    Float
  photos Photo[]

  @@map("locations")
}

model PurchasedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("purchased_photos")
}

model SavedPhotos {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   String   @map("photo_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("saved_photos")
}
